0.0 BASIC SERVER INFORMATION

-----------------------------------------------------------------------
0.1 Location
------------
The server will (eventually) be running on 24.0.128.141:8888

-----------------------------------------------------------------------
0.2 How...?
-----------
Connection with the server can be established through a stream socket
connection. For how to do this in Java, see:
http://java.sun.com/products/jdk/1.1/docs/api/java.net.Socket.html



1.0 SERVER QUERY COMMANDS

After establishing a connection with the server, you can issue one command,
which will cause data to be sent back through the same socket.

----------------------------------------------------------------------- 
1.1 Test for existence
----------------------
Query syntax:   exists 'word'
Arguments:      word: the word to check for existence in the ontology
Description:	determines whether or not a word exists in the ontology
Returns:        if the word does not exist, returns the string 'NULL'
                otherwise, information is returned on the word, as   
                described below in the 'Basic Word Information Structure'
                description (2.1).

-----------------------------------------------------------------------
1.2 Test for relation
---------------------
Query syntax:	relates 'word1' to 'word2' by 'x' degrees [where options]
Arguments:	word1: a word
		word2: another word
		x: degrees of relation (a la kevin bacon)
Description:	This is perhaps best described by an example. Consider the
		query: "relates 'steak' to 'milk' by 1 degrees". (Yes,
		it's the same one from before.) Assuming all necessary
		concepts are in the ontology, it would return:

		"1 produces -> milk : produces -> steak"

		This tells you, assuming you know the meaning of produces,
		that something produces steak and milk. However, because you
		specified only one degree of relation, the query would stop
		here. However, had the query instead been:

		"relates 'steak' to 'milk' by 2 degrees", then we would answer:

		"1 cow -> produces -> milk : cow -> produces -> steak"

		The -> arrows represent 'forward' directional connections, ie,
		'milk' results from 'cow' and 'produces'. However, it's
		possible we could return something like the following:

		"1 cow <- made from <- steak" if the appropriate information
		had been entered into the ontology.

		The number '1' in front of every answer is in the case of
		multiple replies to a query, for example, if all the above
		data was in the ontology, for 2 degrees, we would answer:

		"1 cow -> produces -> milk : cow -> produces -> steak"
		"2 cow <- made from <- steak : cow <- made from <- milk"

		The optional 'where' clause allows for more complex searches.

		It'd be nice to make complex boolean expressions possible for
		where, but considering we have less than two weeks, I dunno.
		Anyway, you can be certain that the following options will be
		implemented:

		where degrees = x: As with relations, limit the connection
			length to x.
		where link = forward|backward: Filters to try only forward
			or backward-pointing connections
		where intermediary = item3: Returns only connections from
			item1 to item2 which pass through item3
		where path = shortest
			only returns the shortest path connecting items
		where ... dunno, what else do you think would be good?

		These options can be combined in a format like:
		"where option1, option2, option3, ..."
		In this case, they will be assumed to be a boolean and. If
		you think there's need for boolean or, I could add that...

----------------------------------------------------------------------------
1.3 Link retrieval
------------------
Query format:	links 'word1' to 'word2' [where options]
Arguments:	word1, word2: the two words on endpoints of the link
Description:	This commands retrieves links from word1 to word2, based
		on options from the where clause (which is optional).

		With no where clause, all links of all degrees from word1
		to word2 are returned. Options in the where clause are the
		same as those listed for the 'relates' command.

		Continuing the cow example:

		Query: "links 'cow' to 'steak'"
		Answer: "1 cow -> produces -> steak"
			"2 cow <- made from <- steak"
		Or, a non-bovine example:
		Query: "links 'fibrinogen' to 'blood'"
		Answer: "1 fibrinogen -> clots -> blood"
			"2 fibrinogen -> helps -> hemophilia -> causes
				-> not clots -> blood"
			(Note: The answer is really on one line, always. I
			split it here to make it more readable.)
		More:
		Query: "links 'fibrinogen' to 'blood' where degrees = 2"
		Answer: "1 fibrinogen -> clots -> blood"
		#2 is not listed because it's not of degree 2.

		The links command also allows for wildcards in either item1
		or item2. For example:
		Query: "links 'fibrinogen' to '*' where degrees = 2"
		Answer: "1 fibrinogen -> is a -> protein"
			"2 fibrinogen -> has -> three manifolds"
			"3 fibrinogen -> clots -> blood"
			"4 fibrinogen -> found in -> animals"
			"5 fibrinogen <- studies <- R. F. Doolittle"
			"6 fibrinogen <- studies <- R. Firtel"
			"7 fibrinogen <- studies <- D. Feng"

		Phew... mail me with questions, or if you want anything done
		differently.

------------------------------------------------------------------------------
2.4 Adding objects
Query syntax:	1. insert object 'word' of type 'pos'
		2. insert synonym 'syn' of type 'pos' of 'word'
		3. insert {forward|backward} link from 'word1' to 'word2'
			[on clause] [and clause]
Arguments:	'word': the object to insert
		'pos': the part of speech (noun, verb, etc.)
		'word1', 'word2': ends of link

Description:	These three insert commands allow either objects or links
		to be added to the ontology. I will first describe the
		object insertion command.

		It's pretty simple, it just adds the new word into the
		ontology.

		Likewise, insert synonym just creates another identifier
		for object 'word'.

		The link insertion is a little more complicated. Forward
		or backward specifies the direction of the link (which
		specifies the direction of the -> arrow). The 'and' clause
		allows for multiple links to be added at one time, like so:

		"insert forward link from 'cow' to 'produce' and forward link
			from 'produce' to 'steak' and ..."

		The 'on' clause allows for boolean 'and' between multiple terms.
		For example:

		"insert forward link from 'green' to 'causes' on 'light'"
		("Make a link from 'green' to 'causes' on any 'causes' item
		which also has an input from 'light'.")

		would allow for the English phrase "green light causes".
		Similarly:

		"insert forward link from 'causes' on 'light' to 'life'"
		means: "Make a link from the 'causes' node to the 'life' node,
		making the link from any item on the 'causes' node which has
		an input from the 'light' node."


------------------------------------------------------------------------------
3.0 THE END
-----------


3.1 The End

The end.
